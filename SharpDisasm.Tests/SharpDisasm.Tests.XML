<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDisasm.Tests</name>
    </assembly>
    <members>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.Write(System.String,System.Object[])">
            <summary>
            Represents the equivalent method available within .tt
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.PushIndent(System.String)">
            <summary>
            Represents the equivalent method available within .tt
            </summary>
            <param name="indent"></param>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.ClearIndent">
            <summary>
            Represents the equivalent method available within .tt
            </summary>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.Error(System.String)">
            <summary>
            Represents the equivalent method available within .tt
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:SharpDisasm.Tests.OpTableGeneration.WriteDelegate">
            <summary>
            Represents the equivalent method available within .tt
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="T:SharpDisasm.Tests.OpTableGeneration.PushIndentDelegate">
            <summary>
            Represents the equivalent method available within .tt
            </summary>
            <param name="indent"></param>
        </member>
        <member name="T:SharpDisasm.Tests.OpTableGeneration.ClearIndentDelegate">
            <summary>
            Represents the equivalent method available within .tt
            </summary>
        </member>
        <member name="T:SharpDisasm.Tests.OpTableGeneration.UdOpcodeTable">
            <summary>
            A single table of instruction definitions, indexed by a decode field.
            </summary>
        </member>
        <member name="F:SharpDisasm.Tests.OpTableGeneration.UdOpcodeTable.OpcExtMap">
            <summary>
            A mapping of opcode extensions to their representational values used in the opcode map.
            </summary>
        </member>
        <member name="T:SharpDisasm.Tests.OpTableGeneration.UdOpcodeTables">
            <summary>
            Collection of opcode tables
            </summary>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.UdOpcodeTables.NewTable(System.String)">
            <summary>
            Create a new opcode table of a given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.UdOpcodeTables.MakeTree(System.String[],System.Object)">
            <summary>
            Recursively construct a tree entry mapping an array of opcodes to an object
            </summary>
            <param name="opcodes"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.UdOpcodeTables.Walk(SharpDisasm.Tests.OpTableGeneration.UdOpcodeTable,System.String[])">
            <summary>
            Walk down the opcode tree, starting at a given opcode table, given a string of opcodes.
            Return null if unable to walk, otherwise return the object at the leaf.
            </summary>
            <param name="tbl"></param>
            <param name="opcodes"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.UdOpcodeTables.Map(SharpDisasm.Tests.OpTableGeneration.UdOpcodeTable,System.String[],System.Object)">
            <summary>
            Create a mapping from a given array of opcodes to an object in
            the opcode tree. Constructs tree branches as needed.
            </summary>
            <param name="tbl"></param>
            <param name="opcodes"></param>
            <param name="obj"></param>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.UdOpcodeTables.MergeSSENone">
            <summary>
            Merge sse tables with only one entry for /sse=none
            </summary>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.UdOpcodeTables.AddSSE2AVXInsn(SharpDisasm.Tests.OpTableGeneration.UdInsnDef,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add an instruction definition containing an avx cpuid bit, but 
            declared in its legacy SSE form. The function splits the definition to create two new
            definitions, one for SSE and one promoted to an AVX form.
            </summary>
            <param name="insnDef"></param>
            <param name="opcexts"></param>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.UdOpcodeTables.GetInsnList">
            <summary>
            Returns a list of all instructions in the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.UdOpcodeTables.GetTableList">
            <summary>
            Returns a list of all tables in the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.UdOpcodeTables.ParseOptableXml(System.String)">
            <summary>
            Parse udis86 optable.xml file and return list of instruction definitions
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDisasm.Tests.OpTableGeneration.UdItabGenerator.GenOpcodeTable(SharpDisasm.Tests.OpTableGeneration.UdOpcodeTable,System.Boolean)">
            <summary>
            Emit Opcode Table in C#
            </summary>
            <param name="table"></param>
            <param name="isGlobal"></param>
        </member>
    </members>
</doc>
